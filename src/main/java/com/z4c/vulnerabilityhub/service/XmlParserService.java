package com.z4c.vulnerabilityhub.service;

import com.z4c.vulnerabilityhub.model.Book;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

@Service
public class XmlParserService {

    public List<Book> parseXmlDocument(InputStream inputStream) {
        List<Book> books = null;
        try {
            // 创建 DocumentBuilder 对象
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            // 将 InputStream 转换成 Document 对象
            Document document = builder.parse(inputStream);

            // 获取根节点
            Element root = document.getDocumentElement();

            // 获取子节点列表
            NodeList nodeList = root.getChildNodes();

            books = new LinkedList<>();
            for (int i = 0; i < nodeList.getLength(); i++) {
                Node node = nodeList.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element element = (Element) node;

                    // 读取节点信息
                    String name = element.getElementsByTagName("name").item(0).getTextContent();
                    String author = element.getElementsByTagName("author").item(0).getTextContent();

                    books.add(new Book(name, author));
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return books;
    }

    public List<Book> fixParseXmlDocument(InputStream inputStream) {
        List<Book> books = null;
        try {
            // 创建 DocumentBuilder 对象
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

            // 禁用外部实体
            factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);

            DocumentBuilder builder = factory.newDocumentBuilder();

            // 将 InputStream 转换成 Document 对象
            Document document = builder.parse(inputStream);

            // 获取根节点
            Element root = document.getDocumentElement();

            // 获取子节点列表
            NodeList nodeList = root.getChildNodes();

            books = new LinkedList<>();
            for (int i = 0; i < nodeList.getLength(); i++) {
                Node node = nodeList.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element element = (Element) node;

                    // 读取节点信息
                    String name = element.getElementsByTagName("name").item(0).getTextContent();
                    String author = element.getElementsByTagName("author").item(0).getTextContent();

                    books.add(new Book(name, author));
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return books;
    }
}
