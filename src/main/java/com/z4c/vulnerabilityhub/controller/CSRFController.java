package com.z4c.vulnerabilityhub.controller;


import com.z4c.vulnerabilityhub.globalException.GlobalException;
import com.z4c.vulnerabilityhub.model.ResponseCode;
import com.z4c.vulnerabilityhub.model.User;
import com.z4c.vulnerabilityhub.service.UserService;
import com.z4c.vulnerabilityhub.utils.CSRFUtils;
import com.z4c.vulnerabilityhub.utils.FileUtils;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Api(tags = "跨站请求伪造(CSRF)")
@Controller
@RequestMapping("/csrf")
public class CSRFController {

    @Autowired
    CSRFUtils csrfUtils;

    @Autowired
    private UserService userService;

    @ApiOperation(value = "跨站请求伪造演示页面", notes = "")
    @GetMapping("/index")
    public String csrfIndex() {
        return "csrf/csrf";
    }

    @ApiIgnore
    @GetMapping("/getAll")
    public ResponseEntity<HashMap<String, Object>> getAll() {
        List<User> users = userService.getAll();
        HashMap<String, Object> resultMap = new HashMap<>();
        resultMap.put("code", 0);
        resultMap.put("msg", "");
        resultMap.put("count", users.size());
        resultMap.put("data", users);
        return ResponseEntity.ok(resultMap);
    }

    @ApiIgnore
    @PostMapping("/update")
    public ResponseEntity<Map<String, Object>> update(User user) {
        HashMap<String, Object> resultMap = new HashMap<>();
        if (!userService.updateUser(user)) {
            resultMap.put("code", 500);
            resultMap.put("msg", "服务器内部错误");
            return ResponseEntity.ok(resultMap);
        }
        resultMap.put("code", 0);
        resultMap.put("msg", "更新成功");
        return ResponseEntity.ok(resultMap);
    }

    @PostMapping("/safeUpdate1")
    public ResponseEntity<Map<String, Object>> safeUpdate1(HttpServletRequest req, User user) {
        String referer = req.getHeader("Referer");
        if (!csrfUtils.isAllowedReferer(referer)) {
            throw new GlobalException(ResponseCode.FORBIDDEN);
        }
        HashMap<String, Object> resultMap = new HashMap<>();
        if (!userService.updateUser(user)) {
            resultMap.put("code", 500);
            resultMap.put("msg", "服务器内部错误");
            return ResponseEntity.ok(resultMap);
        }

        resultMap.put("code", 0);
        resultMap.put("msg", "更新成功");
        return ResponseEntity.ok(resultMap);
    }

}
