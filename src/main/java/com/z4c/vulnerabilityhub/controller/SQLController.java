package com.z4c.vulnerabilityhub.controller;

import com.z4c.vulnerabilityhub.model.User;
import com.z4c.vulnerabilityhub.service.UserService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@Api(tags = "SQL注入")
@RestController
@RequestMapping("/sql")
public class SQLController {

    @Autowired
    UserService userService;

    @ApiOperation(value = "报错注入",notes ="页面将错误信息返回至前端，SQL语句为SELECT * FROM vulhub_user WHERE username like '%${username}%'")
    @GetMapping("error-based")
    public ResponseEntity<List<User>> errorBased(@ApiParam(value = "通过用户名模糊查询用户", required = true)@RequestParam String username){
        List<User> users = userService.selectUsersByUsernameLike(username);
        return ResponseEntity.ok(users);
    }

    @ApiOperation(value = "联合注入",notes ="页面将查询信息返回至前端，SQL语句为SELECT username FROM vulhub_user WHERE last_login_ip = '${ip}'")
    @GetMapping("union-query")
    public ResponseEntity<List<String>> unionQuery(@ApiParam(value = "通过IP地址查询用户名", required = true)@RequestParam String ip){
        List<String> usernames = userService.unionQuery(ip);
        return ResponseEntity.ok(usernames);
    }

    @ApiOperation(value = "布尔盲注",notes = "页面没有将数据回显，但可以通过响应结果的真假来推断出数据库中的数据信息")
    @GetMapping("boolean-based")
    public ResponseEntity<String> booleanBased(@ApiParam(value = "通过用户名查询用户是否存在", required = true)@RequestParam String username){
        List<User> users = userService.selectUsersByUsernameLike(username);
        if (users.isEmpty()){
            return ResponseEntity.ok("用户不存在");
        }
        return ResponseEntity.ok("该用户存在");
    }

    @ApiOperation(value = "时间盲注",notes = "页面没有数据回显，并且无法判断响应结果的真假")
    @GetMapping("time-based")
    public ResponseEntity<String> timeBased(@ApiParam(value = "通过用户名查询用户是否存在", required = true)@RequestParam String username){
        List<User> users = userService.selectUsersByUsernameLike(username);
        return ResponseEntity.ok("");
    }

    /*
     *   修复方案一：
     *
     *   保证SQL语句中不存在${}传入参数，改用#{}传入
     *
     */
    @ApiOperation(value = "安全调用SQL",notes = "改用#{}传入参数")
    @GetMapping("safe/sql")
    public ResponseEntity<List<User>> safeSQL(@ApiParam(value = "通过用户名查询用户是否存在", required = true)@RequestParam String username){
        List<User> users = userService.safeSelectUsersByUsernameLike(username);
        return ResponseEntity.ok(users);
    }
    /*
     *   修复方案二：
     *
     *   无法改用#{}传入参数的情况使用白名单进行过滤
     *
     */
    @ApiOperation(value = "安全调用SQL",notes = "无法改用#{}传入参数的情况使用白名单进行过滤")
    @GetMapping("safe/sql2")
    public ResponseEntity<List<User>> safeSQL2(@ApiParam(value = "通过用户名查询用户是否存在", required = true)@RequestParam String username){
        List<User> users = userService.safeSelectUsersByUsernameLike(username);
        return ResponseEntity.ok(users);
    }


}
