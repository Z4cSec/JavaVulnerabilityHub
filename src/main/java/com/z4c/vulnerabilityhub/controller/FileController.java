package com.z4c.vulnerabilityhub.controller;

import com.z4c.vulnerabilityhub.model.Response;
import com.z4c.vulnerabilityhub.model.ResponseCode;
import com.z4c.vulnerabilityhub.service.UploadService;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Base64;

@Api(tags = "路径遍历")
@RestController()
@RequestMapping("/file")
public class FileController {
    @Autowired
    UploadService uploadService;

    @ApiOperation("上传图片")
    @PostMapping(value = "/uploadPhoto" , consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<Response<String>> uploadAvatar(
            @ApiParam(value = "上传文件", required = true) @RequestPart("file") MultipartFile file) {
        String savePath = uploadService.uploadPhoto(file);
        // 文件上传成功，返回路径
        Response<String> response = new Response<>();
        response.setCode(ResponseCode.SUCCESS.getCode());
        response.setMessage("文件上传成功！");
        response.setData(savePath);
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @ApiOperation("读取图片")
    @PostMapping("/getPhoto")
    public ResponseEntity<byte[]> getImage(
            @ApiParam(value = "文件路径", required = true)@RequestParam("path") String path) throws IOException {
        // 读取图片文件
        File file = new File(path);
        byte[] bytes = Files.readAllBytes(file.toPath());
        // 确定Content-Type
        String contentType = Files.probeContentType(file.toPath());
        // 将图片数据和Headers封装到ResponseEntity中
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.valueOf(contentType));
        headers.setContentLength(bytes.length);
        return new ResponseEntity<>(bytes, headers, HttpStatus.OK);
    }

}
