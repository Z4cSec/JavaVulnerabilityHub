package com.z4c.vulnerabilityhub.controller;

import com.z4c.vulnerabilityhub.service.CommandService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.nio.charset.StandardCharsets;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Api(tags = "命令注入")
@RequestMapping("/command")
@RestController
public class CommandInjectionController {
    @Autowired
    CommandService commandService;

    @ApiOperation(value = "ping接口", notes = "测试主机是否可访问")
    @RequestMapping(value = "/ping", method = RequestMethod.GET)
    public ResponseEntity<String> executeCommand(@ApiParam(value = "请输入ip地址或域名") @RequestParam("host") String host) throws Exception {
        return ResponseEntity.ok(commandService.execCommand(host));
    }


    /*
     *   修复方案一：
     *
     *   java只把第一个空格前的参数作为命令执行，后面皆作为参数输入。所以以这种形式调用无法实现命令注入
     *   若脚本没有执行权限，可能存在调用失败
     */

    @ApiOperation(value = "安全ping接口-修改调用命令方式", notes = "修改调用命令方式，防止命令注入")
    @RequestMapping(value = "/safePing2", method = RequestMethod.GET)
    public ResponseEntity<String> SafeExecuteCommand(@ApiParam(value = "java只把第一个空格前的参数作为命令执行，后面皆作为参数输入。所以以这种形式调用无法实现命令注入Runtime.getRuntime().exec(\"ping \" + host);") @RequestParam("host") String host) throws Exception {
        return ResponseEntity.ok(commandService.safeExecCommand(host));
    }

    /*
     *   修复方案二：
     *
     *   通过白名单校验，只允许指定格式输入，避免特殊字符
     */
    @ApiOperation(value = "安全ping接口-白名单校验", notes = "通过白名单过滤，防止命令注入")
    @RequestMapping(value = "/safePing", method = RequestMethod.GET)
    public ResponseEntity<String> SafeExecuteCommand2(@ApiParam(value = "只允许输入形如10.0.0.1的ip地址或www.baidu.com的域名") @RequestParam("host") String host) throws Exception {
        if (!isValidHost(host)) { //白名单校验
            return ResponseEntity.badRequest().body("仅允许输入字符-与.和字母数字");
        }
        return ResponseEntity.ok(commandService.execCommand(host));
    }

    private boolean isValidHost(String host) {
        String regex = "^[0-9a-zA-Z.-]+$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(host);
        return matcher.matches();
    }
}
