package com.z4c.vulnerabilityhub.filter;

import com.z4c.vulnerabilityhub.utils.XssUtils;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

//继承HttpServletRequestWrapper
public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper {
    HttpServletRequest orgRequest = null;

    public XssHttpServletRequestWrapper(HttpServletRequest request) {
        super(request);
        orgRequest = request;
    }

    /**
     * 覆盖getParameter方法，将参数名和参数值都做xss过滤。<br/>
     * 如果需要获得原始的值，则通过super.getParameterValues(name)来获取<br/>
     * getParameterNames,getParameterValues和getParameterMap也可能需要覆盖
     */
    @Override
    public String getParameter(String name) {
        String value = super.getParameter(XssUtils.xssEncode(name));
        if (value != null) {
            value = XssUtils.xssEncode(value);
        }
        return value;
    }

    @Override
    public String[] getParameterValues(String name) {
        String[] parameterValues = super.getParameterValues(name);
        if (parameterValues==null)return null;
        for (int i = 0; i < parameterValues.length; i++) {
            parameterValues[i] = XssUtils.xssEncode(parameterValues[i]);
        }
        return parameterValues;
    }

    /**
     * 覆盖getHeader方法，将参数名和参数值都做xss过滤。<br/>
     * 如果需要获得原始的值，则通过super.getHeaders(name)来获取<br/>
     * getHeaderNames 也可能需要覆盖
     */
    @Override
    public String getHeader(String name) {

        String value = super.getHeader(XssUtils.xssEncode(name));
        if (value != null) {
            value = XssUtils.xssEncode(value);
        }
        return value;
    }



    /**
     * 获取最原始的request
     *
     *
     */

    public HttpServletRequest getOrgRequest() {
        return orgRequest;
    }
    /**
     * 获取最原始的request的静态方法
     *
     *
     */
    public static HttpServletRequest getOrgRequest(HttpServletRequest req) {
        if(req instanceof XssHttpServletRequestWrapper){
            return ((XssHttpServletRequestWrapper)req).getOrgRequest();
        }

        return req;
    }
}
